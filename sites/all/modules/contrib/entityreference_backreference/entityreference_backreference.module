<?php

/**
 * Implements hook_entity_property_info_alter().
 */
function entityreference_backreference_entity_property_info_alter(&$info) {
  $fields = field_info_fields();
  $entity_info = entity_get_info();
  foreach ($fields as $field) {
    if (strpos($field['type'], 'reference') === FALSE) {
      continue;
    }
    if ($field['type'] == 'entityreference') {
      $target_type = $field['settings']['target_type'];
    }
    else {
      // For field types like node_reference, taxonomy_term_reference, remove
      // the _reference suffix to get the entity type.
      $target_type = str_replace('_reference', '', $field['type']);
    }
    // If we were able to determine the target entity type.
    if (isset($entity_info[$target_type])) {
      // If no target bundles are specified, the field exists for all bundles.
      $target_bundles = !empty($field['settings']['handler_settings']['target_bundles']) ? $field['settings']['handler_settings']['target_bundles'] : array('all');

      $field_name = $field['field_name'];
      foreach ($target_bundles as $target_bundle) {
        // Get a reference to the properties array (entity or bundle).
        if ($target_bundle == 'all') {
          $target = &$info[$target_type];
        }
        else {
          $target = &$info[$target_type]['bundles'][$target_bundle];
        }

        foreach (array_keys($field['bundles']) as $entity_type) {
          $target['properties'][$field_name . '_' . $entity_type . '_eb'] = array(
            'label' => t('@entity_type entity referenced from @field_name', array('@entity_type' => $entity_type, '@field_name' => $field_name)),
            'description' => t('A bridge to the @entity_type entity that is referenced via @field_name', array('@entity_type' => $entity_type, '@field_name' => $field_name)),
            'getter callback' => 'entityreference_backreference_related_entities',
            'field' => $field,
            'type' => 'list<' . $entity_type . '>',
          );

          $target['properties'][$field_name . '_' . $entity_type . '_eb_delta'] = array(
            'label' => t('Delta of @entity_type entity referenced from @field_name', array('@entity_type' => $entity_type, '@field_name' => $field_name)),
            'description' => t('A bridge to the delta of the @entity_type entity that is referenced via @field_name', array('@entity_type' => $entity_type, '@field_name' => $field_name)),
            'getter callback' => 'entityreference_backreference_related_entity_deltas',
            'field' => $field,
            'type' => 'list<integer>',
          );
        }
      }
    }
  }
}

/**
 * Getter callback for related entities.
 */
function entityreference_backreference_related_entities($entity, array $options, $name, $type, $info) {
  // Create an array that will contains the backwards references.
  $entity_ids = array();
  // Retrieve the field.
  $field = $info['field'];
  // Retrieve the entity to target.
  $entity_target = entity_property_list_extract_type($info['type']);
  // Extract the id of the entity.
  list($id) = entity_extract_ids($type, $entity);
  if (isset($id)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', $entity_target)
          ->fieldCondition($field['field_name'], key($field['columns']), $id);
    $result = $query->execute();
    if (isset($result[$entity_target])) {
      $entity_ids = array_keys($result[$entity_target]);
    }
  }
  return $entity_ids;
}

/**
 * Getter callback for related entity deltas.
 */
function entityreference_backreference_related_entity_deltas($entity, array $options, $name, $type, $info) {
  // Retrieve the field.
  $field = $info['field'];
  // Retrieve the field table.
  $table = _field_sql_storage_tablename($field);
  // Retrieve the field column.
  $column = _field_sql_storage_columnname($field['field_name'], key($field['columns']));
  // Create an array that will contain the backwards reference deltas.
  $entity_deltas = array();
  // Retrieve the entity type to target.
  $matches = array();
  $pattern = "/{$field['field_name']}_([a-z_]*)_eb_delta/";
  preg_match($pattern, $name, $matches);
  $target_type = $matches[1];
  // Extract the id of the source entity.
  list($id) = entity_extract_ids($type, $entity);
  if (isset($id)) {
    $entity_deltas = db_select($table, 't')
      ->fields('t', array('delta'))
      ->condition('entity_type', $target_type)
      ->condition($column, $id)
      ->execute()
      ->fetchCol(0);
  }

  return $entity_deltas;
}
